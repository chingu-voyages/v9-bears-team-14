{"version":3,"sources":["components/Map/MapConstants/MAP_CONSTANTS.js","context/country-context.js","components/Map/Map.js","components/Header/Header.js","hooks/useRecipes.js","components/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["MAP_CONSTANTS","supportedCountries","United States of America","United Kingdom","Canada","China","Netherlands","Egypt","France","Greece","India","Ireland","Italy","Jamaica","Japan","Kenya","Malaysia","Mexico","Morocco","Russia","Spain","Thailand","Vietnam","styles","supportedStyled","default","fill","stroke","strokeWidth","outline","hover","pressed","boxShadow","notSupportedStyled","selectedStyled","CountryContext","React","createContext","countrySelected","Map","_useContext","useContext","setSelectedCountry","_MAP_CONSTANTS$styles","react_default","a","createElement","className","lib","projectionConfig","scale","rotation","width","height","style","center","disablePanning","geography","JSONmap","disableOptimization","geographies","projection","map","i","id","name","properties","key","data-tip","onClick","countryName","hasOwnProperty","dist_default","Header","props","useRecipes","country","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","get","concat","sent","data","abrupt","stop","_x","apply","this","arguments","Results","length","meal","idMeal","strMeal","src","strMealThumb","alt","App","Provider","value","components_Header_Header","components_Map_Map","components_Results_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kuwGA6FeA,EA7FM,CACjBC,mBAAmB,CACfC,2BAA4B,WAC5BC,iBAAkB,UAClBC,OAAU,WACVC,MAAS,UACTC,YAAc,QACdC,MAAQ,WACRC,OAAS,SACTC,OAAS,QACTC,MAAQ,SACRC,QAAU,QACVC,MAAQ,UACRC,QAAU,WACVC,MAAQ,WACRC,MAAQ,SACRC,SAAW,YACXC,OAAS,UACTC,QAAU,WACVC,OAAS,UACTC,MAAQ,UACRC,SAAW,OACXC,QAAU,cAEdC,OAAO,CACHC,gBAAgB,CACZC,QAAS,CACLC,KAAM,UACNC,OAAQ,UACRC,YAAa,EACbC,QAAS,QAEXC,MAAO,CACLJ,KAAM,UACNC,OAAQ,UACRC,YAAa,IACbC,QAAS,QAEXE,QAAS,CACPL,KAAM,UACNC,OAAQ,UACRC,YAAa,IACbC,QAAS,OACTG,UAAU,kBAGlBC,mBAAmB,CACfR,QAAS,CACLC,KAAM,UACNC,OAAQ,UACRC,YAAa,IACbC,QAAS,QAEXC,MAAO,CACLJ,KAAM,UACNC,OAAQ,UACRC,YAAa,IACbC,QAAS,QAEXE,QAAS,CACPL,KAAM,UACNC,OAAQ,UACRC,YAAa,IACbC,QAAS,OACTG,UAAU,kBAGpBE,eAAe,CACbT,QAAQ,CACNC,KAAM,UACNC,OAAQ,UACRC,YAAa,IACbC,QAAS,OACTG,UAAU,iBAEZF,MAAO,CACLJ,KAAM,UACNC,OAAQ,UACRC,YAAa,IACbC,QAAS,OACTG,UAAU,iBAEZD,QAAS,CACPL,KAAM,UACNC,OAAQ,UACRC,YAAa,IACbC,QAAS,OACTG,UAAU,oBCpFdG,EAAiBC,IAAMC,cAAc,CAACC,gBAAgB,oBC8D3CC,EAnDN,WAAI,IAAAC,EACiCC,qBAAWN,GAAlDG,EADME,EACNF,gBAAiBI,EADXF,EACWE,mBACjBzC,EAAsBD,EAAtBC,mBAFM0C,EAG8C3C,EAAcuB,OAAlEC,EAHMmB,EAGNnB,gBAAgBS,EAHVU,EAGUV,mBAAmBC,EAH7BS,EAG6BT,eAa1C,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACE,EAAA,cAAD,CACEC,iBAAkB,CAChBC,MAAO,IACPC,SAAU,EAAE,GAAG,EAAE,IAEnBC,MAAO,IACPC,OAAQ,IACRC,MAAO,CACLF,MAAO,OACPC,OAAQ,SAGVT,EAAAC,EAAAC,cAACE,EAAA,cAAD,CAAeO,OAAQ,CAAC,EAAE,IAAKC,gBAAc,GAC3CZ,EAAAC,EAAAC,cAACE,EAAA,YAAD,CAAaS,UAAWC,EAASC,qBAAqB,GACnD,SAACC,EAAaC,GAAd,OAA6BD,EAAYE,IAAI,SAACL,EAAWM,GAAZ,MAAmC,QAAjBN,EAAUO,IACxEpB,EAAAC,EAAAC,cAACE,EAAA,UAAD,CACEiB,KAAMR,EAAUS,WAAWD,KAC3BE,IAAKJ,EACLN,UAAWA,EACXI,WAAYA,EACZO,WAAUX,EAAUS,WAAWD,KAC/BI,QAAS,kBAAI3B,EAAmBe,EAAUS,WAAWD,OACrDX,OAnCIgB,EAmCab,EAAUS,WAAWD,KAlC/ChE,EAAmBsE,eAAeD,IAAgBA,IAAchC,EAC1DJ,EAEDjC,EAAmBsE,eAAeD,GACjC9C,EAGAS,KARM,IAACqC,QAyCd1B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,QClDS4B,SARD,SAACC,GACX,OACI9B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,iECwBG4B,EApBG,SAACC,GAAU,IAAAC,EACGC,mBAAS,IADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACVI,EADUJ,EAAA,GAiBzB,OAbAK,oBACK,WAAI,IACMnF,EAAqBD,EAArBC,oBACP,eAAAoF,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAA1C,EAAA2C,KAAE,SAAAC,EAAMb,GAAN,IAAAc,EAAA,OAAAH,EAAA1C,EAAA8C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACK7F,EAAmBsE,eAAeK,GADvC,CAAAgB,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAE6BC,IAAMC,IAAN,kBAAAC,OAA4BhG,EAAmB2E,KAF5E,OAEYc,EAFZE,EAAAM,KAGMf,EAAWO,EAASS,MAH1B,cAAAP,EAAAQ,OAAA,kCAAAR,EAAAS,SAAAZ,MAAF,gBAAAa,GAAA,OAAAjB,EAAAkB,MAAAC,KAAAC,YAAA,GAMG7B,IAEP,CAACA,IAEEM,GCHIwB,EAjBC,SAAChC,GAAU,IACpBpC,EAAmBG,qBAAWN,GAA9BG,gBACD4C,EAAUP,EAAWrC,GAC3B,OACIM,EAAAC,EAAAC,cAAA,WACKR,EAAgBqE,OAAS,GAAI/D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkB/C,EAAcC,mBAAmBqC,GAAjE,YAC9BM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVmC,EAAQpB,IAAI,SAAC8C,GAAD,OACThE,EAAAC,EAAAC,cAAA,OAAKqB,IAAKyC,EAAKC,OAAQ9D,UAAU,iBAC7BH,EAAAC,EAAAC,cAAA,UAAO8D,EAAKE,SACZlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAgBgE,IAAKH,EAAKI,aAAcC,IAAKL,EAAKE,gBCItEI,MAbf,WAAe,IAAArC,EACiCC,mBAAS,IAD1CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNvC,EADMyC,EAAA,GACWrC,EADXqC,EAAA,GAEb,OACInC,EAAAC,EAAAC,cAACX,EAAegF,SAAhB,CAAyBC,MAAQ,CAAC9E,kBAAiBI,uBACjDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuE,EAAD,MACAzE,EAAAC,EAAAC,cAACwE,EAAD,MACA1E,EAAAC,EAAAC,cAACyE,EAAD,SCFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7a4bbbf6.chunk.js","sourcesContent":[" const MAP_CONSTANTS={\n    supportedCountries:{      //countries supported by the meals api\n        \"United States of America\": \"American\",\n        \"United Kingdom\": \"British\",\n        \"Canada\": \"Canadian\",\n        \"China\": \"Chinese\",\n        \"Netherlands\":\"Dutch\",\n        \"Egypt\":\"Egyptian\",\n        \"France\":\"French\",\n        \"Greece\":\"Greek\",\n        \"India\":\"Indian\",\n        \"Ireland\":\"Irish\",\n        \"Italy\":\"Italian\",\n        \"Jamaica\":\"Jamaican\",\n        \"Japan\":\"Japanese\",\n        \"Kenya\":\"Kenyan\",\n        \"Malaysia\":\"Malaysian\",\n        \"Mexico\":\"Mexican\",\n        \"Morocco\":\"Moroccan\",\n        \"Russia\":\"Russian\",\n        \"Spain\":\"Spanish\",\n        \"Thailand\":\"Thai\",\n        \"Vietnam\":\"Vietnamese\"\n    },\n    styles:{\n        supportedStyled:{\n            default: {\n                fill: \"#32CD32\",                  //shade of green\n                stroke: \"#607D8B\",\n                strokeWidth: 1,\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#FF5722\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#FF5722\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\",\n                boxShadow:\"0 0 10px #fff\"\n              }\n        },\n        notSupportedStyled:{\n            default: {\n                fill: \"#ECEFF1\",        // any country that is NOT-supported will shaded gray\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#ECEFF1\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\",\n              },\n              pressed: {\n                fill: \"#ECEFF1\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\",\n                boxShadow:\"0 0 10px #fff\"\n              }\n        },\n      selectedStyled:{\n        default:{\n          fill: \"#FF5722\",\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\",\n          boxShadow:\"0 0 10px #fff\"\n        },\n        hover: {\n          fill: \"#FF5722\",\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\",\n          boxShadow:\"0 0 10px #fff\"\n        },\n        pressed: {\n          fill: \"#FF5722\",\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\",\n          boxShadow:\"0 0 10px #fff\"\n        }\n      }\n    }\n}\n\nexport default MAP_CONSTANTS;","import React,{useContext} from 'react'\n\n//const CountryContext = React.createContext();                     //not initializing createContext means tests fail\nconst CountryContext = React.createContext({countrySelected:\"\"});//create custom hook to retrieve context for testing, otherwise test fails for Map component //https://medium.com/7shifts-engineering-blog/testing-usecontext-react-hook-with-enzyme-shallow-da062140fc83\n\nexport const useCountryContext = ()=>useContext(CountryContext);        \nexport {CountryContext as default}","import React, { useContext } from \"react\"\nimport ReactTooltip from \"react-tooltip\"\nimport JSONmap from '../../static/world-countries.json';\nimport MAP_CONSTANTS from './MapConstants/MAP_CONSTANTS';\nimport CountryContext from '../../context/country-context'\nimport \"./Map.css\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\"\n\n\nconst Map =()=>{\n  const {countrySelected, setSelectedCountry} = useContext(CountryContext)\n  const {supportedCountries} = MAP_CONSTANTS;\n  const {supportedStyled,notSupportedStyled,selectedStyled}= MAP_CONSTANTS.styles;\n\n  const getStyles =(countryName)=>{\n    if(supportedCountries.hasOwnProperty(countryName) && countryName===countrySelected){\n      return selectedStyled\n    }\n    else if(supportedCountries.hasOwnProperty(countryName)){\n      return supportedStyled\n    }\n    else \n      return notSupportedStyled;\n  }\n\n  return (\n    <div className=\"Map__Wrapper\">\n      <ComposableMap\n        projectionConfig={{\n          scale: 205,\n          rotation: [-11,0,0],\n        }}\n        width={980}\n        height={551}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n        }}\n        >\n        <ZoomableGroup center={[0,20]} disablePanning>\n          <Geographies geography={JSONmap} disableOptimization={true}>\n            {(geographies, projection) => geographies.map((geography, i) => geography.id !== \"ATA\" && (\n              <Geography\n                name={geography.properties.name}\n                key={i}\n                geography={geography}\n                projection={projection}\n                data-tip={geography.properties.name}\n                onClick={()=>setSelectedCountry(geography.properties.name)}\n                style={getStyles(geography.properties.name)}\n              ></Geography>\n            ))}\n          </Geographies>  \n        </ZoomableGroup>\n      </ComposableMap>\n      <ReactTooltip />\n    </div>\n  )\n}\n\n  export default Map\n  ","import React from 'react';\nimport './Header.css';\nconst Header =(props)=>{\n    return(\n        <header className=\"Header__Wrapper\">\n            <h1 className=\"Header--Title\">Geo-Foods</h1>\n        </header>\n    )\n}\n\nexport default Header;","import {useState,useEffect} from 'react';\nimport MAP_CONSTANTS from '../components/Map/MapConstants/MAP_CONSTANTS';\nimport axios from 'axios';\n\n/**\n * @hook - useRecipes - takes in a country argument and returns recipes of that country\n * @param {string} - country - name of country\n * @return {array} - array of recipe objects \n */\nconst useRecipes= (country)=>{\n    const [recipes,setRecipes]= useState([]);\n   \n    \n    useEffect(\n         ()=>{\n            const {supportedCountries}= MAP_CONSTANTS;          //Need to move into useEffect function to avoid ESLINT error https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\n            ( async country =>{\n                if(supportedCountries.hasOwnProperty(country)){\n                    const response = await axios.get(`/api/countries/${supportedCountries[country]}`);\n                    setRecipes(response.data);\n                }       \n                return;\n            })(country);\n        },\n        [country]      //empty [] means it works like componentDidMount\n    );\n    return recipes;\n}\n\nexport default useRecipes;","import React, {useContext} from 'react'\nimport './Results.css'\nimport useRecipes from '../../hooks/useRecipes';\nimport CountryContext from '../../context/country-context'\nimport MAP_CONSTANTS from '../Map/MapConstants/MAP_CONSTANTS'\n\nconst Results = (props) => {\nconst {countrySelected} = useContext(CountryContext)\nconst recipes = useRecipes(countrySelected)\nreturn (\n    <div >\n        {countrySelected.length > 0 &&<h1 className=\"Results__Title\">{MAP_CONSTANTS.supportedCountries[countrySelected]} Recipes</h1>}         \n        <div className=\"Results__Wrapper\">\n            {recipes.map((meal) => \n                <div key={meal.idMeal} className=\"Results__Card\">\n                    <h1  >{meal.strMeal}</h1>\n                    <img className=\"Results__Image\"src={meal.strMealThumb} alt={meal.strMeal}/>\n                </div>\n            )} \n        </div> \n    </div>\n    )\n}\nexport default Results;","import React, {useState} from 'react';\nimport Map from './components/Map/Map';\nimport Header from './components/Header/Header';\nimport Results from './components/Results/Results';\nimport CountryContext from './context/country-context'\n\n\nfunction App() {\n  const [countrySelected, setSelectedCountry] = useState('')\n  return (\n      <CountryContext.Provider value={ {countrySelected, setSelectedCountry}} >\n        <div className=\"App\">\n          <Header/>\n          <Map />\n          <Results />\n        </div>\n      </CountryContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}